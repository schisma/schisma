module Integration.Csound.Opcodes.Logic
  ( logic
  )
where

import           Test.Tasty
import           Test.Tasty.HUnit

import           Data.List
import           Data.Text
import           Data.Text.Prettyprint.Doc

import           Schisma.Csound

import           Integration.Csound.Helpers

-- TODO: Fix
-- logic = testGroup
--   "logic"
--   [testIfEqual, testIfLessThan, testIfGreaterThan, testIfAnd, testIfOr]

logic = testGroup
  "logic"
  []

-- testIfEqual =
--   let ifEqualBlock = signalsToInstrumentBlock [sampleIfEqual]
--       nestedIfEqualBlock = signalsToInstrumentBlock [sampleNestedIfEqual]
--       multipleSignalsIfEqualBlock = signalsToInstrumentBlock sampleMultipleSignalsIfEqual
--       mixedMultipleSignalsIfEqualBlock = signalsToInstrumentBlock sampleMixedMultipleSignalsIfEqual
--   in  testGroup
--         "ifEqual"
--         [ testCase "ifEqual opcode generation"
--             $ instrumentBlockCompare ifEqualBlock sampleIfEqualOutput
--         , testCase "ifEqual opcode generation (nested)"
--             $ instrumentBlockCompare nestedIfEqualBlock sampleNestedIfEqualOutput
--         , testCase "ifEqual opcode generation (multiple signals)"
--             $ instrumentBlockCompare multipleSignalsIfEqualBlock sampleMultipleSignalsIfEqualOutput
--         , testCase "ifEqual opcode generation (mixed multiple signals)"
--             $ instrumentBlockCompare mixedMultipleSignalsIfEqualBlock sampleMixedMultipleSignalsIfEqualOutput
--         ]
--
-- testIfLessThan =
--   let ifLessThanBlock = signalsToInstrumentBlock [sampleIfLessThan]
--   in  testGroup
--         "ifLessThan"
--         [ testCase "ifLessThan opcode generation"
--             $ instrumentBlockCompare ifLessThanBlock sampleIfLessThanOutput
--         ]
--
-- testIfGreaterThan =
--   let ifGreaterThanBlock = signalsToInstrumentBlock [sampleIfGreaterThan]
--       nestedIfGreaterThanBlock = signalsToInstrumentBlock [sampleNestedIfGreaterThan]
--   in  testGroup
--         "ifGreaterThan"
--         [ testCase "ifGreaterThan opcode generation"
--             $ instrumentBlockCompare ifGreaterThanBlock sampleIfGreaterThanOutput
--         , testCase "ifGreaterThan opcode generation (nested)"
--             $ instrumentBlockCompare nestedIfGreaterThanBlock sampleNestedIfGreaterThanOutput
--         ]
--
-- testIfAnd =
--   let ifAndBlock = signalsToInstrumentBlock [sampleIfAnd]
--       nestedIfAndBlock = signalsToInstrumentBlock [sampleNestedIfAnd]
--       chainedIfAndBlock = signalsToInstrumentBlock [sampleChainedIfAnd]
--   in  testGroup
--         "ifAnd"
--         [ testCase "ifAnd opcode generation"
--             $ instrumentBlockCompare ifAndBlock sampleIfAndOutput
--         , testCase "ifAnd opcode generation (nested)"
--             $ instrumentBlockCompare nestedIfAndBlock sampleNestedIfAndOutput
--         , testCase "ifAnd opcode generation (chained)"
--             $ instrumentBlockCompare chainedIfAndBlock sampleChainedIfAndOutput
--         ]
--
-- testIfOr =
--   let ifOrBlock = signalsToInstrumentBlock [sampleIfOr]
--       nestedIfOrBlock = signalsToInstrumentBlock [sampleNestedIfOr]
--       chainedIfOrBlock = signalsToInstrumentBlock [sampleChainedIfOr]
--   in  testGroup
--         "ifOr"
--         [ testCase "ifOr opcode generation"
--             $ instrumentBlockCompare ifOrBlock sampleIfOrOutput
--         , testCase "ifOr opcode generation (nested)"
--             $ instrumentBlockCompare nestedIfOrBlock sampleNestedIfOrOutput
--         , testCase "ifOr opcode generation (chained)"
--             $ instrumentBlockCompare chainedIfOrBlock sampleChainedIfOrOutput
--         ]
--
--
-- sampleIfEqual :: ARateSignal
-- sampleIfEqual = oscil (a# 0.5) frequency (i# (-1)) (i# 1)
--   where
--     ifSignal = oscilWithDefaults (a# 440) (k# 1) :: ARateSignal
--     elseSignal = a# 220 :: ARateSignal
--     frequency = ifEqual (i# 1, i# 2) (ifSignal, elseSignal)
--
-- sampleIfEqualOutput :: Doc Text
-- sampleIfEqualOutput = linesToInstrumentBlock
--   [ "instr 1"
--   , "a1 = 0.5"
--   , "i2 = 1.0"
--   , "i3 = 2.0"
--   , "if (i2 == i3) then"
--   , "a4 = 440.0"
--   , "k5 = 1.0"
--   , "i6 = -1.0"
--   , "i7 = 0.0"
--   , "a8 oscil a4, k5, i6, i7"
--   , "a9 = a8"
--   , "else"
--   , "a4 = 220.0"
--   , "a9 = a4"
--   , "endif"
--   , "i10 = -1.0"
--   , "a11 oscil a1, a9, i10, i2"
--   , "out a11"
--   , "endin"
--   ]
--
-- sampleNestedIfEqual :: ARateSignal
-- sampleNestedIfEqual = oscil (a# 0.5) frequency (i# (-1)) (i# 1)
--   where
--     nestedIfSignal = a# 110
--     nestedThenSignal = a# 880
--     nestedFrequency = ifEqual (i# 3, i# 4) (nestedIfSignal, nestedThenSignal)
--     ifSignal = oscilWithDefaults nestedFrequency (k# 1) :: ARateSignal
--     elseSignal = oscilWithDefaults nestedFrequency (k# 2 -# k# 1 :: KRateSignal) :: ARateSignal
--     frequency = ifEqual (i# 1, i# 2) (ifSignal, elseSignal)
--
-- sampleNestedIfEqualOutput :: Doc Text
-- sampleNestedIfEqualOutput = linesToInstrumentBlock
--   [ "instr 1"
--   , "a1 = 0.5"
--   , "i2 = 1.0"
--   , "i3 = 2.0"
--   , "if (i2 == i3) then"
--   , "i4 = 3.0"
--   , "i5 = 4.0"
--   , "if (i4 == i5) then"
--   , "a6 = 110.0"
--   , "else"
--   , "a6 = 880.0"
--   , "endif"
--   , "a7 = a6"
--   , "k8 = 1.0"
--   , "i9 = -1.0"
--   , "i10 = 0.0"
--   , "a13 oscil a7, k8, i9, i10"
--   , "else"
--   , "i4 = 3.0"
--   , "i5 = 4.0"
--   , "if (i4 == i5) then"
--   , "a6 = 110.0"
--   , "else"
--   , "a6 = 880.0"
--   , "endif"
--   , "a7 = a6"
--   , "k8 = 2.0"
--   , "k9 = 1.0"
--   , "k10 = k8 - k9"
--   , "i11 = -1.0"
--   , "i12 = 0.0"
--   , "a13 oscil a7, k10, i11, i12"
--   , "endif"
--   , "i14 = -1.0"
--   , "a15 oscil a1, a13, i14, i2"
--   , "out a15"
--   , "endin"
--   ]
--
-- sampleMultipleSignalsIfEqual :: [ARateSignal]
-- sampleMultipleSignalsIfEqual = ifEqual (i# 1, i# 2) (ifSignal, elseSignal)
--   where
--     source = oscilWithDefaults (a# 0.5) (a# 500)
--     ifSignal = baboWithDefaults source (k# 6, k# 4, k# 3) (i# 14.39, i# 11.86, i# 10)
--     elseSignal = baboWithDefaults source (k# 0, k# 0, k# 0) (i# 1, i# 2, i# 3)
--
-- sampleMultipleSignalsIfEqualOutput :: Doc Text
-- sampleMultipleSignalsIfEqualOutput = linesToInstrumentBlock
--   [ "instr 1"
--   , "i1 = 1.0"
--   , "i2 = 2.0"
--   , "if (i1 == i2) then"
--   , "a3 = 0.5"
--   , "a4 = 500.0"
--   , "i5 = -1.0"
--   , "i6 = 0.0"
--   , "a7 oscil a3, a4, i5, i6"
--   , "k8 = 6.0"
--   , "k9 = 4.0"
--   , "k10 = 3.0"
--   , "i11 = 14.39"
--   , "i12 = 11.86"
--   , "i13 = 10.0"
--   , "i14 = 8.0"
--   , "i15 = -2.0"
--   , "i16 = 0.99"
--   , "i17 = 0.1"
--   , "i18 = 0.3"
--   , "i19 = 0.5"
--   , "i20 = 0.8"
--   , "i21 ftgenonce i6, i6, i14, i15, i16, i17, i6, i6, i6, i18, i19, i20"
--   , "a22, a23 babo a7, k8, k9, k10, i11, i12, i13, i1, i21"
--   , "else"
--   , "a3 = 0.5"
--   , "a4 = 500.0"
--   , "i5 = -1.0"
--   , "i6 = 0.0"
--   , "a7 oscil a3, a4, i5, i6"
--   , "k8 = 0.0"
--   , "i9 = 3.0"
--   , "i10 = 8.0"
--   , "i11 = -2.0"
--   , "i12 = 0.99"
--   , "i13 = 0.1"
--   , "i14 = 0.3"
--   , "i15 = 0.5"
--   , "i16 = 0.8"
--   , "i17 ftgenonce i6, i6, i10, i11, i12, i13, i6, i6, i6, i14, i15, i16"
--   , "a22, a23 babo a7, k8, k8, k8, i1, i2, i9, i1, i17"
--   , "endif"
--   , "out a22, a23"
--   , "endin"
--   ]
--
-- sampleMixedMultipleSignalsIfEqual :: [ARateSignal]
-- sampleMixedMultipleSignalsIfEqual = ifEqual (i# 1, i# 2) (ifSignals, elseSignals)
--   where
--     oscil1 = oscilWithDefaults (a# 0.5) (k# 400) :: ARateSignal
--     oscil2 = osciliWithDefaults (a# 0.25) (k# 200) :: ARateSignal
--     oscil3 = lfoWithDefaults (k# 0.75) (k# 20) :: ARateSignal
--     oscil4 = lfoWithDefaults (k# 1) (k# 40) :: ARateSignal
--     ifSignals = [oscil1, oscil3]
--     elseSignals = baboWithDefaults oscil4 (k# 0, k# 0, k# 0) (i# 1, i# 2, i# 3)
--
-- sampleMixedMultipleSignalsIfEqualOutput :: Doc Text
-- sampleMixedMultipleSignalsIfEqualOutput = linesToInstrumentBlock
--   [
--   ]
--
-- sampleIfGreaterThan :: ARateSignal
-- sampleIfGreaterThan = oscil (a# 0.5) frequency (i# (-1)) (i# 1)
--   where
--     ifSignal = oscilWithDefaults (a# 440) (k# 1) :: ARateSignal
--     elseSignal = a# 220 :: ARateSignal
--     frequency = ifGreaterThan (i# 1, i# 2) (ifSignal, elseSignal)
--
-- sampleIfGreaterThanOutput :: Doc Text
-- sampleIfGreaterThanOutput = linesToInstrumentBlock
--   [ "instr 1"
--   , "a1 = 0.5"
--   , "i2 = 1.0"
--   , "i3 = 2.0"
--   , "if (i2 > i3) then"
--   , "a4 = 440.0"
--   , "k5 = 1.0"
--   , "i6 = -1.0"
--   , "i7 = 0.0"
--   , "a8 oscil a4, k5, i6, i7"
--   , "else"
--   , "a8 = 220.0"
--   , "endif"
--   , "i9 = -1.0"
--   , "a10 oscil a1, a8, i9, i2"
--   , "out a10"
--   , "endin"
--   ]
--
-- sampleIfLessThan :: ARateSignal
-- sampleIfLessThan = tabmorphak index weight setIndex1 setIndex2 ftns
--   where
--     position = k# 0
--     index = phasorWithDefaults (a# 440) :: ARateSignal
--
--     ifLessThanOne = ifLessThan (position, k# 1)
--
--     ifWeight = k# 1 -# position :: KRateSignal
--     thenWeight = k# 2 -# position :: KRateSignal
--     weight =  ifLessThanOne (ifWeight, thenWeight)
--
--     setIndex1 = ifLessThanOne (k# 0, k# 1)
--     setIndex2 = ifLessThanOne (k# 1, k# 2)
--
--     ftns = [i# 1, i# 2, i# 3]
--
-- sampleIfLessThanOutput :: Doc Text
-- sampleIfLessThanOutput = linesToInstrumentBlock
--   [ "instr 1"
--   , "a1 = 440.0"
--   , "i2 = 0.0"
--   , "a3 phasor a1, i2"
--   , "k4 = 0.0"
--   , "k5 = 1.0"
--   , "if (k4 < k5) then"
--   , "k7 = k5 - k4"
--   , "else"
--   , "k6 = 2.0"
--   , "k7 = k6 - k4"
--   , "endif"
--   , "if (k4 < k5) then"
--   , "k8 = k4"
--   , "else"
--   , "k8 = k5"
--   , "endif"
--   , "if (k4 < k5) then"
--   , "k9 = k5"
--   , "else"
--   , "k9 = 2.0"
--   , "endif"
--   , "i10 = 1.0"
--   , "i11 = 2.0"
--   , "i12 = 3.0"
--   , "a13 tabmorphak a3, k7, k8, k9, i10, i11, i12"
--   , "out a13"
--   , "endin"
--   ]
--
-- sampleNestedIfGreaterThan :: ARateSignal
-- sampleNestedIfGreaterThan = oscil (a# 0.5) frequency (i# (-1)) (i# 1)
--   where
--     nestedIfSignal = a# 110
--     nestedThenSignal = a# 880
--     nestedFrequency = ifGreaterThan (i# 3, i# 4) (nestedIfSignal, nestedThenSignal)
--     ifSignal = oscilWithDefaults nestedFrequency (k# 1) :: ARateSignal
--     elseSignal = a# 220 :: ARateSignal
--     frequency = ifGreaterThan (i# 1, i# 2) (ifSignal, elseSignal)
--
-- sampleNestedIfGreaterThanOutput :: Doc Text
-- sampleNestedIfGreaterThanOutput = linesToInstrumentBlock
--   [ "instr 1"
--   , "a1 = 0.5"
--   , "i2 = 1.0"
--   , "i3 = 2.0"
--   , "if (i2 > i3) then"
--   , "i4 = 3.0"
--   , "i5 = 4.0"
--   , "if (i4 > i5) then"
--   , "a6 = 110.0"
--   , "else"
--   , "a6 = 880.0"
--   , "endif"
--   , "k7 = 1.0"
--   , "i8 = -1.0"
--   , "i9 = 0.0"
--   , "a10 oscil a6, k7, i8, i9"
--   , "else"
--   , "a10 = 220.0"
--   , "endif"
--   , "i11 = -1.0"
--   , "a12 oscil a1, a10, i11, i2"
--   , "out a12"
--   , "endin"
--   ]
--
-- sampleIfAnd :: ARateSignal
-- sampleIfAnd = oscil (a# 0.5) frequency (i# (-1)) (i# 1)
--   where
--     iCheck = compareEqual (i# 1, i# 2)
--     kCheck = compareEqual (k# 3, k# 4)
--     ifSignal = oscilWithDefaults (a# 440) (k# 1) :: ARateSignal
--     elseSignal = a# 220 :: ARateSignal
--     frequency = ifAnd (iCheck, kCheck) (ifSignal, elseSignal)
--
-- sampleIfAndOutput :: Doc Text
-- sampleIfAndOutput = linesToInstrumentBlock
--   [ "instr 1"
--   , "a1 = 0.5"
--   , "i2 = 1.0"
--   , "i3 = 2.0"
--   , "k4 = 3.0"
--   , "k5 = 4.0"
--   , "if (i2 == i3) && (k4 == k5) then"
--   , "a6 = 440.0"
--   , "k7 = 1.0"
--   , "i8 = -1.0"
--   , "i9 = 0.0"
--   , "a10 oscil a6, k7, i8, i9"
--   , "else"
--   , "a10 = 220.0"
--   , "endif"
--   , "i11 = -1.0"
--   , "a12 oscil a1, a10, i11, i2"
--   , "out a12"
--   , "endin"
--   ]
--
-- sampleNestedIfAnd :: ARateSignal
-- sampleNestedIfAnd = oscil (a# 0.5) frequency (i# (-1)) (i# 1)
--   where
--     nestedKCheck1 = compareEqual (k# 4, k# 5)
--     nestedKCheck2 = compareEqual (k# 5, k# 6)
--     nestedFrequency = ifAnd (nestedKCheck1, nestedKCheck2) (a# 880, a# 110)
--
--     iCheck = compareEqual (i# 1, i# 2)
--     kCheck = compareEqual (k# 3, k# 4)
--
--     ifSignal = oscilWithDefaults nestedFrequency (k# 1) :: ARateSignal
--     elseSignal = a# 220 :: ARateSignal
--     frequency = ifAnd (iCheck, kCheck) (ifSignal, elseSignal)
--
-- sampleNestedIfAndOutput :: Doc Text
-- sampleNestedIfAndOutput = linesToInstrumentBlock
--   [ "instr 1"
--   , "a1 = 0.5"
--   , "i2 = 1.0"
--   , "i3 = 2.0"
--   , "k4 = 3.0"
--   , "k5 = 4.0"
--   , "if (i2 == i3) && (k4 == k5) then"
--   , "k6 = 5.0"
--   , "k7 = 6.0"
--   , "if (k5 == k6) && (k6 == k7) then"
--   , "a8 = 880.0"
--   , "else"
--   , "a8 = 110.0"
--   , "endif"
--   , "k9 = 1.0"
--   , "i10 = -1.0"
--   , "i11 = 0.0"
--   , "a12 oscil a8, k9, i10, i11"
--   , "else"
--   , "a12 = 220.0"
--   , "endif"
--   , "i13 = -1.0"
--   , "a14 oscil a1, a12, i13, i2"
--   , "out a14"
--   , "endin"
--   ]
--
-- sampleChainedIfAnd :: ARateSignal
-- sampleChainedIfAnd = signal
--   where
--     useEnvelope = compareNotEqual (k# 1, k# 0)
--     modulate = compareEqual (k# 10, k# 10)
--
--     defaultPulseWidth = k# 0.1
--     modulatedPulseWidthFromEnvelope = k# 0.3
--
--     pulseWidthFromEnvelope = ifAnd
--       (useEnvelope, modulate)
--       (defaultPulseWidth +# modulatedPulseWidthFromEnvelope, defaultPulseWidth) :: KRateSignal
--
--     useOscillator = compareNotEqual (k# 3, k# 4)
--     modulatedPulseWidthFromOscillator = k# 0.4
--
--     pulseWidthFromOscillator = ifAnd
--       (useOscillator, modulate)
--       (pulseWidthFromEnvelope +# modulatedPulseWidthFromOscillator, pulseWidthFromEnvelope)
--
--     pulseWidth = pulseWidthFromOscillator  %# k# 1
--
--     signal = vco2 (k# 1) (k# 440) (i# 18) pulseWidth (k# 0) (i# 0.5)
--
-- sampleChainedIfAndOutput :: Doc Text
-- sampleChainedIfAndOutput = linesToInstrumentBlock
--   [ "instr 1"
--   , "k1 = 1.0"
--   , "k2 = 440.0"
--   , "i3 = 18.0"
--   , "k4 = 3.0"
--   , "k5 = 4.0"
--   , "k6 = 10.0"
--   , "if (k4 != k5) && (k6 == k6) then"
--   , "k7 = 0.0"
--   , "if (k1 != k7) && (k6 == k6) then"
--   , "k8 = 0.1"
--   , "k9 = 0.3"
--   , "k10 = k8 + k9"
--   , "else"
--   , "k10 = 0.1"
--   , "endif"
--   , "k11 = k10"
--   , "k12 = 0.4"
--   , "k13 = k11 + k12"
--   , "else"
--   , "k7 = 0.0"
--   , "if (k1 != k7) && (k6 == k6) then"
--   , "k8 = 0.1"
--   , "k9 = 0.3"
--   , "k10 = k8 + k9"
--   , "else"
--   , "k10 = 0.1"
--   , "endif"
--   , "k13 = k10"
--   , "endif"
--   , "k14 = k13 % k1"
--   , "k15 = 0.0"
--   , "i16 = 0.5"
--   , "a17 vco2 k1, k2, i3, k14, k15, i16"
--   , "out a17"
--   , "endin"
--   ]
--
-- sampleIfOr :: ARateSignal
-- sampleIfOr = oscil (a# 0.5) frequency (i# (-1)) (i# 1)
--   where
--     iCheck = compareEqual (i# 1, i# 2)
--     kCheck = compareEqual (k# 3, k# 4)
--     ifSignal = oscilWithDefaults (a# 440) (k# 1) :: ARateSignal
--     elseSignal = a# 220 :: ARateSignal
--     frequency = ifOr (iCheck, kCheck) (ifSignal, elseSignal)
--
-- sampleIfOrOutput :: Doc Text
-- sampleIfOrOutput = linesToInstrumentBlock
--   [ "instr 1"
--   , "a1 = 0.5"
--   , "i2 = 1.0"
--   , "i3 = 2.0"
--   , "k4 = 3.0"
--   , "k5 = 4.0"
--   , "if (i2 == i3) || (k4 == k5) then"
--   , "a6 = 440.0"
--   , "k7 = 1.0"
--   , "i8 = -1.0"
--   , "i9 = 0.0"
--   , "a10 oscil a6, k7, i8, i9"
--   , "else"
--   , "a10 = 220.0"
--   , "endif"
--   , "i11 = -1.0"
--   , "a12 oscil a1, a10, i11, i2"
--   , "out a12"
--   , "endin"
--   ]
--
-- sampleNestedIfOr :: ARateSignal
-- sampleNestedIfOr = oscil (a# 0.5) frequency (i# (-1)) (i# 1)
--   where
--     nestedKCheck1 = compareEqual (k# 4, k# 5)
--     nestedKCheck2 = compareEqual (k# 5, k# 6)
--     nestedFrequency = ifOr (nestedKCheck1, nestedKCheck2) (a# 880, a# 110)
--
--     iCheck = compareEqual (i# 1, i# 2)
--     kCheck = compareEqual (k# 3, k# 4)
--
--     ifSignal = oscilWithDefaults nestedFrequency (k# 1) :: ARateSignal
--     elseSignal = a# 220 :: ARateSignal
--     frequency = ifOr (iCheck, kCheck) (ifSignal, elseSignal)
--
-- sampleNestedIfOrOutput :: Doc Text
-- sampleNestedIfOrOutput = linesToInstrumentBlock
--   [ "instr 1"
--   , "a1 = 0.5"
--   , "i2 = 1.0"
--   , "i3 = 2.0"
--   , "k4 = 3.0"
--   , "k5 = 4.0"
--   , "if (i2 == i3) || (k4 == k5) then"
--   , "k6 = 5.0"
--   , "k7 = 6.0"
--   , "if (k5 == k6) || (k6 == k7) then"
--   , "a8 = 880.0"
--   , "else"
--   , "a8 = 110.0"
--   , "endif"
--   , "k9 = 1.0"
--   , "i10 = -1.0"
--   , "i11 = 0.0"
--   , "a12 oscil a8, k9, i10, i11"
--   , "else"
--   , "a12 = 220.0"
--   , "endif"
--   , "i13 = -1.0"
--   , "a14 oscil a1, a12, i13, i2"
--   , "out a14"
--   , "endin"
--   ]
--
-- sampleChainedIfOr :: ARateSignal
-- sampleChainedIfOr = signal
--   where
--     useEnvelope = compareNotEqual (k# 1, k# 0)
--     useSecondaryReverb = compareEqual (k# 10, k# 10)
--
--     source = oscilWithDefaults (a# 0.5) (a# 500)
--     defaultReverb = baboWithDefaults source (k# 6, k# 4, k# 3) (i# 14.39, i# 11.86, i# 10)
--     secondarySource = oscilWithDefaults (a# 0.25) (a# 440)
--     secondaryReverb = baboWithDefaults secondarySource (k# 0, k# 0, k# 0) (i# 1, i# 2, i# 3)
--
--     defaultPulseWidth = k# 0.1
--     modulatedPulseWidthFromEnvelope = k# 0.3
--
--     reverb = ifOr
--       (useEnvelope, useSecondaryReverb)
--       (secondaryReverb, defaultReverb)
--     tertiarySource = oscilWithDefaults (a# 0.75) (a# 880)
--     tertiaryReverb = baboWithDefaults tertiarySource (k# 0, k# 0, k# 0) (i# 1, i# 2, i# 3)
--
--     useOscillator = compareNotEqual (k# 3, k# 4)
--     conditionalReverb = ifOr
--       (useOscillator, useEnvelope)
--       (reverb, tertiaryReverb)
--
--     signal = Data.List.head conditionalReverb
--
-- sampleChainedIfOrOutput :: Doc Text
-- sampleChainedIfOrOutput = linesToInstrumentBlock
--   [ "instr 1"
--   , "k1 = 3.0"
--   , "k2 = 4.0"
--   , "k3 = 1.0"
--   , "k4 = 0.0"
--   , "if (k1 != k2) || (k3 != k4) then"
--   , "k5 = 10.0"
--   , "if (k3 != k4) || (k5 == k5) then"
--   , "a6 = 0.25"
--   , "a7 = 440.0"
--   , "i8 = -1.0"
--   , "i9 = 0.0"
--   , "a10 oscil a6, a7, i8, i9"
--   , "i11 = 1.0"
--   , "i12 = 2.0"
--   , "i13 = 3.0"
--   , "i14 = 8.0"
--   , "i15 = -2.0"
--   , "i16 = 0.99"
--   , "i17 = 0.1"
--   , "i18 = 0.3"
--   , "i19 = 0.5"
--   , "i20 = 0.8"
--   , "i21 ftgenonce i9, i9, i14, i15, i16, i17, i9, i9, i9, i18, i19, i20"
--   , "a24, a25 babo a10, k4, k4, k4, i11, i12, i13, i11, i21"
--   , "else"
--   , "a6 = 0.5"
--   , "a7 = 500.0"
--   , "i8 = -1.0"
--   , "i9 = 0.0"
--   , "a10 oscil a6, a7, i8, i9"
--   , "k11 = 6.0"
--   , "i12 = 14.39"
--   , "i13 = 11.86"
--   , "i14 = 10.0"
--   , "i15 = 1.0"
--   , "i16 = 8.0"
--   , "i17 = -2.0"
--   , "i18 = 0.99"
--   , "i19 = 0.1"
--   , "i20 = 0.3"
--   , "i21 = 0.5"
--   , "i22 = 0.8"
--   , "i23 ftgenonce i9, i9, i16, i17, i18, i19, i9, i9, i9, i20, i21, i22"
--   , "a24, a25 babo a10, k11, k2, k1, i12, i13, i14, i15, i23"
--   , "endif"
--   , "a26 = a24"
--   , "a27 = a25"
--   , "else"
--   , "a5 = 0.75"
--   , "a6 = 880.0"
--   , "i7 = -1.0"
--   , "i8 = 0.0"
--   , "a9 oscil a5, a6, i7, i8"
--   , "i10 = 1.0"
--   , "i11 = 2.0"
--   , "i12 = 3.0"
--   , "i13 = 8.0"
--   , "i14 = -2.0"
--   , "i15 = 0.99"
--   , "i16 = 0.1"
--   , "i17 = 0.3"
--   , "i18 = 0.5"
--   , "i19 = 0.8"
--   , "i20 ftgenonce i8, i8, i13, i14, i15, i16, i8, i8, i8, i17, i18, i19"
--   , "a26, a27 babo a9, k4, k4, k4, i10, i11, i12, i10, i20"
--   , "endif"
--   , "out a26"
--   , "endin"
--   ]
--
-- -- TODO: Test logical condition where if/else bodies are lists of multiple
-- -- signals (i.e., from different opcodes [so not e.g., babo])
